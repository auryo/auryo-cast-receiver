{"version":3,"sources":["Player/Player.module.scss","NextUp/NextUp.module.scss","Splash/Splash.module.scss","App/App.module.scss","assets/img/auryo-dark.png","assets/img/auryo-tray.png","castContext.tsx","localization.ts","Splash/Splash.tsx","Spinner/Spinner.tsx","utils/getReadableTime.ts","NextUp/NextUp.tsx","Player/Player.tsx","App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","header","logo","background","foreground","trackImage","pauseIconWrapper","visible","trackInfo","trackArtist","trackTitle","right","progressBar","progress","time","nextUp","nextUpText","imgWrapper","Splash","bottomMessage","iconWrapper","App","__webpack_require__","p","ctxt","React","CastContextProvider","Provider","CastContextConsumer","Consumer","strings","LocalizedStrings","fr","chromecast.ready","track.nextup","nl","en","de","es","it","pt-br","pl","react_default","a","createElement","className","styles","src","Spinner","_ref","full","contained","react","version","id","x","y","width","height","fill","attributeName","attributeType","values","begin","dur","repeatCount","getReadableTime","sec","ms","with_seconds","hours","absoluteHours","Math","floor","h","concat","minutes","absoluteMinutes","m","seconds","absoluteSeconds","s","str","Component","NextUp","nextTrack","smallImage","images","url","largeImage","Image","index_m_default","key","title","is","lines","text","artist","Player","mediaInfo","currentTime","paused","metadata","customData","duration","style","backgroundImage","undefined","isNaN","state","splash","loading","audio","createRef","listenTracker","_this2","this","castContext","props","castReceiverContext","addEventListener","event","visibility","getVisibilityState","console","log","document","getPlayerManager","setMediaElement","current","requestData","media","setState","e","getTime","setInterval","getCurrentTimeSec","Splash_Splash","src_Spinner_Spinner","ref","autoPlay","Player_Player","withCastContext","value","Object","assign","Boolean","window","location","hostname","match","cast","framework","CastReceiverContext","getInstance","appConfig","CastReceiverOptions","statusText","maxInactivity","start","ReactDOM","render","src_App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ebd1b7bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Player_header__ezIOW\",\"logo\":\"Player_logo__2zl7G\",\"background\":\"Player_background__1bq39\",\"foreground\":\"Player_foreground__ZWXGt\",\"trackImage\":\"Player_trackImage__2Ggq5\",\"pauseIconWrapper\":\"Player_pauseIconWrapper__2fQxY\",\"visible\":\"Player_visible__pfPJH\",\"trackInfo\":\"Player_trackInfo__3K_Kz\",\"trackArtist\":\"Player_trackArtist__2xZrS\",\"trackTitle\":\"Player_trackTitle__3iRKU\",\"right\":\"Player_right__10mDz\",\"progressBar\":\"Player_progressBar__2TPXV\",\"progress\":\"Player_progress__3JSce\",\"time\":\"Player_time__3-wK9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nextUp\":\"NextUp_nextUp__1GDpM\",\"trackInfo\":\"NextUp_trackInfo__21FmR\",\"nextUpText\":\"NextUp_nextUpText__3p0wg\",\"imgWrapper\":\"NextUp_imgWrapper__qFFuj\",\"trackTitle\":\"NextUp_trackTitle__3qHvy\",\"trackArtist\":\"NextUp_trackArtist__TLc5I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Splash\":\"Splash_Splash__142AX\",\"bottomMessage\":\"Splash_bottomMessage__2zXYd\",\"iconWrapper\":\"Splash_iconWrapper__2yCWR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1QRWg\"};","module.exports = __webpack_public_path__ + \"static/media/auryo-dark.cc6f3a3e.png\";","module.exports = __webpack_public_path__ + \"static/media/auryo-tray.cb417aa8.png\";","import * as React from 'react';\n\nexport interface CastContextInterface {\n  castReceiverContext: cast.framework.CastReceiverContext;\n};\n\nconst ctxt = React.createContext<CastContextInterface | null>(null);\n\nexport const CastContextProvider = ctxt.Provider;\n\nexport const CastContextConsumer = ctxt.Consumer;\n\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\nexport type WithCastContext = { castContext?: CastContextInterface };\n\nexport function withCastContext<P extends WithCastContext>(Component: React.ComponentType<P>) {\n  return function WrappedComponent(\n    props: Omit<P, 'castContext'>\n  ) {\n    return (\n      <CastContextConsumer>\n        {(value) => <Component {...props as P} castContext={value} />}\n      </CastContextConsumer>\n    );\n  }\n}","import LocalizedStrings from 'react-localization';\n\nexport const strings = new LocalizedStrings({\n    fr: {\n        \"chromecast.ready\": \"Prêt à caster\",\n        \"track.nextup\": \"Suivant\"\n    },\n    nl: {\n        \"chromecast.ready\": \"Klaar om te casten\",\n        \"track.nextup\": \"Volgend nummer\"\n    },\n    en: {\n        \"chromecast.ready\": \"Ready to cast\",\n        \"track.nextup\": \"Next up\"\n    },\n    de: {\n        \"track.nextup\": \"Es folgt\",\n        \"chromecast.ready\": \"Startklar\"\n    },\n    es: {\n        \"track.nextup\": \"A continuación\",\n        \"chromecast.ready\": \"Listo para transmitir\"\n    },\n    it: {\n        \"track.nextup\": \"A seguire\",\n        \"chromecast.ready\": \"Pronto per trasmettere\"\n    },\n    \"pt-br\": {\n        \"track.nextup\": \"Próximo\",\n        \"chromecast.ready\": \"Pronto para transmitir\"\n    },\n    \"pl\": {\n        \"track.nextup\": \"W kolejce\",\n        \"chromecast.ready\": \"Klar til å caste\"\n    }\n});","import React from 'react';\nimport styles from './Splash.module.scss';\nimport logo from \"../assets/img/auryo-dark.png\"\nimport { strings } from '../localization';\n\ninterface Props {\n\n}\nexport const Splash: React.FunctionComponent<Props> = () => (\n  <div className={styles.Splash}>\n    <div>\n      <img src={logo} />\n      <div className={styles.bottomMessage}>\n        <div className={styles.iconWrapper}>\n          <i className=\"icon icon-cast\"></i>\n        </div>\n        {strings[\"chromecast.ready\"]}\n      </div>\n    </div>\n  </div>\n);\n","import * as React from 'react';\nimport './Spinner.scss';\n\ninterface Props {\n    full?: boolean;\n    contained?: boolean;\n}\n\nconst Spinner = React.memo<Props>(({ full, contained }) => (\n    <div className=\"loader full\">\n        <div>\n            <svg version='1.1' id='Layer_1' x='0px' y='0px' width={35} height={26}>\n\n                <rect x='0' y='13' width='4' height='5' fill='#333'>\n\n                    <animate\n                        attributeName='height'\n                        attributeType='XML'\n                        values='5;25;5'\n                        begin='0s'\n                        dur='0.8s'\n                        repeatCount='indefinite'\n                    />\n                    <animate\n                        attributeName='y'\n                        attributeType='XML'\n                        values='13; 1; 13'\n                        begin='0s'\n                        dur='0.8s'\n                        repeatCount='indefinite'\n                    />\n\n                </rect>\n                <rect x='10' y='13' width='4' height='5' fill='#333'>\n                    <animate\n                        attributeName='height'\n                        attributeType='XML'\n                        values='5;25;5'\n                        begin='0.15s'\n                        dur='0.8s'\n                        repeatCount='indefinite'\n                    />\n                    <animate\n                        attributeName='y'\n                        attributeType='XML'\n                        values='13; 1; 13'\n                        begin='0.15s'\n                        dur='0.8s'\n                        repeatCount='indefinite'\n                    />\n                </rect>\n                <rect x='20' y='13' width='4' height='5' fill='#333'>\n                    <animate\n                        attributeName='height'\n                        attributeType='XML'\n                        values='5;25;5'\n                        begin='0.3s'\n                        dur='0.8s'\n                        repeatCount='indefinite'\n                    />\n                    <animate\n                        attributeName='y'\n                        attributeType='XML'\n                        values='13; 1; 13'\n                        begin='0.3s'\n                        dur='0.8s'\n                        repeatCount='indefinite'\n                    />\n                </rect>\n                <rect x='30' y='13' width='4' height='5' fill='#333'>\n                    <animate\n                        attributeName='height'\n                        attributeType='XML'\n                        values='5;25;5'\n                        begin='0.7s'\n                        dur='0.8s'\n                        repeatCount='indefinite'\n                    />\n                    <animate\n                        attributeName='y'\n                        attributeType='XML'\n                        values='13; 1; 13'\n                        begin='0.5s'\n                        dur='0.8s'\n                        repeatCount='indefinite'\n                    />\n                </rect>\n\n            </svg>\n        </div>\n    </div>\n));\n\nexport default Spinner;\n","export function getReadableTime(sec: number, ms?: boolean, with_seconds?: boolean) {\n    if (!sec) { return \"00:00\"; }\n\n    // Get hours from milliseconds\n    let hours = sec / (60 * 60);\n    if (ms) {\n        hours = sec / (60 * 60 * 1000);\n    }\n    const absoluteHours = Math.floor(hours);\n    const h = absoluteHours > 9 ? absoluteHours : `0${absoluteHours}`;\n\n    // Get remainder from hours and convert to minutes\n    const minutes = (hours - absoluteHours) * 60;\n    const absoluteMinutes = Math.floor(minutes);\n    const m = absoluteMinutes > 9 ? absoluteMinutes : `0${absoluteMinutes}`;\n\n    // Get remainder from minutes and convert to seconds\n    const seconds = (minutes - absoluteMinutes) * 60;\n    const absoluteSeconds = Math.floor(seconds);\n    const s = absoluteSeconds > 9 ? absoluteSeconds : `0${absoluteSeconds}`;\n\n    let str = \"\";\n\n    if (h !== \"00\") {\n        str += `${h}:${m}${with_seconds ? `:${s}` : \"\"}`;\n    } else {\n\n        str += `${m}:${s}`;\n    }\n\n    return str;\n}","import * as React from 'react';\nimport styles from './NextUp.module.scss';\nimport { strings } from '../localization';\nimport NanoClamp from 'nanoclamp';\n\nexport interface NextTrackData {\n    title: string;\n    artist: string;\n    images: {\n        url: string\n    }[]\n}\n\ninterface Props {\n    nextTrack?: NextTrackData;\n}\n\n\nexport const NextUp = React.memo<Props>(({ nextTrack }) => {\n    if (!nextTrack) {\n        return null;\n    }\n\n    const smallImage = nextTrack.images[0].url;\n    const largeImage = nextTrack.images[1].url;\n\n    // Preload large image\n    const img = new Image();\n    img.src = largeImage;\n\n    return (\n        <div>\n            <div className={styles.nextUpText}>{strings[\"track.nextup\"]} <i className=\"icon-skip-forward\" /></div>\n            <div className={styles.nextUp}>\n                <div className={styles.imgWrapper}><img src={smallImage} /></div>\n                <div className={styles.trackInfo}>\n                    <NanoClamp\n                        className={styles.trackTitle}\n                        key={nextTrack.title}\n                        is=\"div\"\n                        lines={1}\n                        text={nextTrack.title}\n                    />\n                    <div className={styles.trackArtist}>{nextTrack.artist}</div>\n                </div>\n            </div>\n        </div>\n    )\n});","import React from 'react';\nimport styles from './Player.module.scss';\nimport { MediaInformation, MusicTrackMediaMetadata } from 'chromecast-caf-receiver/cast.framework.messages';\nimport { getReadableTime } from '../utils/getReadableTime';\nimport logo from \"../assets/img/auryo-tray.png\";\nimport { NextUp, NextTrackData } from '../NextUp/NextUp';\nimport NanoClamp from \"nanoclamp\";\n\ninterface Props {\n  mediaInfo: MediaInformation;\n  currentTime: number;\n  paused: boolean;\n}\n\ninterface CustomData {\n  nextTrack?: NextTrackData\n}\n\nexport const Player: React.FunctionComponent<Props> = ({ mediaInfo, currentTime, paused }) => {\n\n  if (!mediaInfo.metadata) {\n    return null;\n  }\n\n  const metadata: MusicTrackMediaMetadata = mediaInfo.metadata as MusicTrackMediaMetadata;\n  const customData: CustomData | undefined = mediaInfo.customData;\n\n  const smallImage = metadata.images[0].url;\n  const largeImage = metadata.images[1].url;\n\n  const progress = (currentTime / (mediaInfo.duration || 0)) * 100;\n\n  return (\n    <div className={styles.Player}>\n      <div className={styles.background} style={{ backgroundImage: `url(\"${smallImage}\")` }}></div>\n      <div className={styles.foreground}>\n        <div className={styles.header}>\n\n          <div><img className={styles.logo} src={logo} /></div>\n          <div>\n            <NextUp nextTrack={customData ? customData.nextTrack : undefined} />\n          </div>\n        </div>\n        <div className={styles.trackImage}>\n          <div className={`${styles.pauseIconWrapper} ${paused ? styles.visible : ''}`}><i className=\"icon-pause\" /></div>\n          <img src={largeImage} />\n        </div>\n        <div className={styles.right}>\n          <div className={styles.trackInfo}>\n            <div className={styles.trackArtist}>{metadata.artist}</div>\n            <NanoClamp\n              className={styles.trackTitle}\n              key={metadata.title}\n              is=\"div\"\n              lines={2}\n              text={metadata.title}\n            />\n          </div>\n          <div className={styles.progressBar}>\n            <div className={styles.progress} style={{ width: `${!isNaN(progress) && progress > 0 ? progress : 0}%` }} />\n          </div>\n          <div className={styles.time}>\n            <div>{getReadableTime(currentTime, false, true)}</div>\n            <div>{getReadableTime((mediaInfo.duration || 0), false, true)}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n};\n","import React, { Component, RefObject } from 'react';\nimport styles from './App.module.scss';\nimport { withCastContext, WithCastContext } from '../castContext';\nimport { Splash } from '../Splash/Splash';\nimport Spinner from '../Spinner/Spinner';\nimport { RequestEvent } from 'chromecast-caf-receiver/cast.framework.events';\nimport { LoadRequestData, MediaInformation } from 'chromecast-caf-receiver/cast.framework.messages';\nimport { Player } from '../Player/Player';\n\ninterface AppProps extends WithCastContext {\n\n}\n\ninterface AppState {\n  splash: boolean;\n  loading: boolean;\n  mediaInfo?: MediaInformation;\n\n  currentTime: number;\n}\n\nclass App extends Component<AppProps, AppState> {\n\n  public readonly state: AppState = {\n    splash: true,\n    loading: false,\n    currentTime: 0\n  }\n\n  audio: RefObject<HTMLAudioElement> = React.createRef();\n  private listenTracker: NodeJS.Timer | null = null;\n\n  componentDidMount() {\n    const { castContext } = this.props;\n\n    if (castContext) {\n      castContext.castReceiverContext.addEventListener('VISIBILITY_CHANGED', (event) => {\n        const visibility = castContext.castReceiverContext.getVisibilityState();\n\n        console.log(\"VISIBILITY_CHANGED\", visibility);\n\n        // if (event.data) { // It is visible\n        //   window.mediaElement.play(); // Resume media playback\n        //   window.clearTimeout(window.timeout); // Turn off the timeout\n        //   window.timeout = null;\n        // } else {\n        //   window.mediaElement.pause(); // Pause playback\n        //   window.timeout = window.setTimeout(function () { window.close(); }, 10000); // 10 Minute timeout\n        // }\n      })\n\n      document.addEventListener('webkitvisibilitychange', () => {\n        const visibility = castContext.castReceiverContext.getVisibilityState();\n\n        console.log(\"webkitvisibilitychange\", visibility);\n\n      });\n\n      castContext.castReceiverContext.getPlayerManager().setMediaElement(this.audio.current)\n\n      castContext.castReceiverContext.getPlayerManager().addEventListener('REQUEST_LOAD', (event: RequestEvent) => {\n        if (event.requestData && (event.requestData as LoadRequestData).media) {\n          this.setState({\n            mediaInfo: (event.requestData as LoadRequestData).media\n          })\n        }\n\n        this.setState({\n          splash: false,\n          loading: true\n        })\n      })\n\n      castContext.castReceiverContext.getPlayerManager().addEventListener('LOADED_DATA', (event) => {\n        this.setState({\n          splash: false,\n          loading: false\n        })\n      })\n\n      if (this.audio.current) {\n\n        // Get currentTime \n        this.audio.current.addEventListener('play', (e) => {\n          if (!this.listenTracker) {\n            this.getTime();\n            this.listenTracker = setInterval(() => {\n              this.getTime();\n            }, 900);\n          }\n        });\n      }\n\n    }\n  }\n\n  private getTime() {\n    if (this.audio.current && this.props.castContext) {\n      this.setState({\n        currentTime: this.props.castContext.castReceiverContext.getPlayerManager().getCurrentTimeSec()\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className={styles.App}>\n        {\n          this.state.splash && <Splash />\n        }\n        {\n          !this.state.mediaInfo && this.state.loading && <Spinner />\n        }\n        <audio ref={this.audio} autoPlay></audio>\n\n        {\n          this.state.mediaInfo && (\n            <Player\n              mediaInfo={this.state.mediaInfo}\n              currentTime={this.state.currentTime}\n              paused={this.audio.current ? this.audio.current.paused : false}\n            />\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default withCastContext(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport { CastContextInterface, CastContextProvider } from './castContext';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nconst castContext: CastContextInterface = {\n    castReceiverContext: cast.framework.CastReceiverContext.getInstance()\n}\n\n/**\n * Application config\n **/\nconst appConfig = new cast.framework.CastReceiverOptions();\n\n/**\n * Text that represents the application status. It should meet\n * internationalization rules as may be displayed by the sender application.\n * @type {string|undefined}\n **/\nappConfig.statusText = 'Ready to play';\n\n/**\n * Maximum time in seconds before closing an idle\n * sender connection. Setting this value enables a heartbeat message to keep\n * the connection alive. Used to detect unresponsive senders faster than\n * typical TCP timeouts. The minimum value is 5 seconds, there is no upper\n * bound enforced but practically it's minutes before platform TCP timeouts\n * come into play. Default value is 10 seconds.\n * @type {number|undefined}\n **/\nif (process.env.NODE_ENV !== \"development\") {\n    appConfig.maxInactivity = 6000;\n}\n\n/**\n * Initializes the system manager. The application should call this method when\n * it is ready to start receiving messages, typically after registering\n * to listen for the events it is interested on.\n */\ncastContext.castReceiverContext.start(appConfig);\n\nReactDOM.render(\n    <CastContextProvider value={castContext}>\n        <App />\n    </CastContextProvider>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}